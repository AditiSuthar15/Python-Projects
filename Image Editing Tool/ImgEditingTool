import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk, ImageFilter, ImageOps

class ImageEditor(tk.Frame):

    def __init__(self, master=None):
        super().__init__(master, width=500, height=550) # set the width and height of the frame
        self.master = master
        self.pack_propagate(0) # disable automatic expansion of the frame
        self.pack()

        # Create a frame for the buttons
        self.button_frame = tk.Frame(self)
        self.button_frame.pack(side="top", fill="x")

        self.image = None
        self.canvas = tk.Canvas(self, width=500, height=550)
        self.canvas.config(bg="#EEEADE")# set the background color to white
        self.canvas.pack(side="top", fill="both", expand=True)
        
        self.open_button = tk.Button(self.button_frame, text="Open Image", command=self.open_image)
        self.open_button.pack(side="left")

        self.save_button = tk.Button(self.button_frame, text="Save Image", command=self.save_image, state=tk.DISABLED)
        self.save_button.pack(side="left")
        
        self.bw_button = tk.Button(self.button_frame, text="Black & White", command=self.turn_to_bw)
        self.bw_button.pack(side="left")

        self.sketch_button = tk.Button(self.button_frame, text="Pencil Sketch", command=self.turn_to_sketch)
        self.sketch_button.pack(side="left")

        self.rotate_button = tk.Button(self.button_frame, text="Rotate Image", command=self.rotate_image)
        self.rotate_button.pack(side="left")

        self.flip_button = tk.Button(self.button_frame, text="Flip Image", command=self.flip_image_horizontally)
        self.flip_button.pack(side="left")

        self.clear_button = tk.Button(self.button_frame, text="Clear", command=self.clear_canvas)
        self.clear_button.pack(side="right")

    def open_image(self):
        file_path = filedialog.askopenfilename(filetypes=(("JPEG files", "*.jpg"), ("PNG files", "*.png")))
        if file_path:
            self.image = Image.open(file_path)
            self.image = self.image.resize((400, 450), resample=Image.Resampling.LANCZOS)
            self.photo = ImageTk.PhotoImage(self.image)
            self.canvas.delete("all")  # Remove any previously drawn image
            w, h = self.image.size
            x = (self.canvas.winfo_width() - w) // 2  # Calculate x-coordinate for centering image
            y = (self.canvas.winfo_height() - h) // 2  # Calculate y-coordinate for centering image
            self.canvas.create_image(x, y, anchor="nw", image=self.photo)  # Draw the image at the center
            self.save_button.config(state=tk.NORMAL)

    def save_image(self):
        save_filename = filedialog.asksaveasfilename(defaultextension=".jpg", filetypes=(("JPEG files", "*.jpg"), ("PNG files", "*.png")))
        if save_filename:
            self.image.save(save_filename)
            
    def turn_to_bw(self):
        if self.image:
            self.image = self.image.convert("L")
            self.photo = ImageTk.PhotoImage(self.image)
            self.canvas.delete("all")
            w, h = self.image.size
            x = (self.canvas.winfo_width() - w) // 2
            y = (self.canvas.winfo_height() - h) // 2
            self.canvas.create_image(x, y, anchor="nw", image=self.photo)
            
    def turn_to_sketch(self):
        if self.image:
            self.image = self.image.filter(ImageFilter.CONTOUR)
            self.photo = ImageTk.PhotoImage(self.image)
            self.canvas.delete("all")
            w, h = self.image.size
            x = (self.canvas.winfo_width() - w) // 2
            y = (self.canvas.winfo_height() - h) // 2
            self.canvas.create_image(x, y, anchor="nw", image=self.photo)

    def rotate_image(self):
        if self.image:
            self.image = self.image.rotate(90, expand=True)  # rotate the image by 90 degrees clockwise
            self.photo = ImageTk.PhotoImage(self.image)
            self.canvas.delete("all")
            w, h = self.image.size
            x = (self.canvas.winfo_width() - w) // 2
            y = (self.canvas.winfo_height() - h) // 2
            self.canvas.create_image(x, y, anchor="nw", image=self.photo)
            
    def flip_image_horizontally(self):
        if self.image:
            self.image = ImageOps.mirror(self.image)
            self.photo = ImageTk.PhotoImage(self.image)
            self.canvas.delete("all")
            w, h = self.image.size
            x = (self.canvas.winfo_width() - w) // 2
            y = (self.canvas.winfo_height() - h) // 2
            self.canvas.create_image(x, y, anchor="nw", image=self.photo)
        
    def clear_canvas(self):
        self.canvas.delete("all")
        self.save_button.config(state=tk.DISABLED)
          
root = tk.Tk()
root.title("Image Editing Tool")
root.resizable(False, False)
app = ImageEditorApp(master=root)
app.mainloop()
